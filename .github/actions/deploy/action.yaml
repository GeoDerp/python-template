name: Deploy
description: 'Deploy tested container'

inputs:
  github_token:
    description: 'Automatically created token. Set this to the GITHUB_TOKEN secret'
    required: true
  docker_repo_name:
    description: 'Docker image name'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0   

    - name: Extract branch name
      id: branch-names
      shell: bash
      run: echo "current_branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Format test image tag for caching
      run: |
        echo "formatted_branch_name=$(echo ${{ steps.branch-names.outputs.current_branch }} | sed 's/\//-/g')" >> $GITHUB_ENV
      shell: bash

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.github_token }}

    - name: Create package.json for Semantic Release
      shell: bash
      run: |
        if [ ! -f "package.json" ]; then
        echo '{
          "name": "test-app",
          "version": "0.0.0",
          "private": true
        }' > package.json
        fi
        
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v4
      id: semantic
      with:
        branch: ${{ env.formatted_branch_name }}
        ci: true
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Set image tag and name
      run: |
        # set image tag
        if [[ $(echo ${{ steps.semantic.outputs.new_release_published }}) = "true" ]]; then
          echo "image_tag=$(echo ${{ steps.semantic.outputs.new_release_version }})" >> $GITHUB_ENV
        else
          echo "image_tag=$(echo $(git describe --tags --abbrev=0 | sed 's/^v//'))" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ inputs.docker_repo_name }})
        tags: |
          ${{ env.image_tag }}
          latest
        
    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}